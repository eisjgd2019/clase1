package com.diagnostico.vista;


import com.diagnostico.dto.CoordenadasDTO;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Hogar
 */
public class Mov extends javax.swing.JFrame implements Runnable {

    int randomX;
    int randomY;
    int horizontalTux;
    int verticalTux;
    Thread hilo;
    ArrayList<CoordenadasDTO> areaWin;
    ArrayList<CoordenadasDTO> areaTux;

    public Mov() {
        initComponents();
        setTitle("Movimiento Tux");
        setSize(280, 180);
        setVisible(true);
        setLocationRelativeTo(null);
        setResizable(false);
        hilo = new Thread(this);
        hilo.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tux = new javax.swing.JLabel();
        win = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 102, 0));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        tux.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tux.png"))); // NOI18N
        tux.setPreferredSize(new java.awt.Dimension(60, 70));

        win.setIcon(new javax.swing.ImageIcon(getClass().getResource("/windows.png"))); // NOI18N
        win.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        win.setPreferredSize(new java.awt.Dimension(60, 60));
        win.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(win, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(tux, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(win, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tux, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void posicionAleatoria() {
        randomX = (int) (Math.random() * 200) + 1;
        randomY = (int) (Math.random() * 100) + 1;
    }

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        horizontalTux = tux.getX();
        verticalTux = tux.getY();

        if (evt.getKeyChar() == 'd') {
            if (horizontalTux <= 220) {
                horizontalTux += 6;
                tux.setLocation(horizontalTux, verticalTux);
            }
        }
        if (evt.getKeyChar() == 'a') {
            if (horizontalTux >= 3) {
                horizontalTux -= 6;
                tux.setLocation(horizontalTux, verticalTux);
            }
        }

        if (evt.getKeyChar() == 'w') {
            if (verticalTux >= 3) {
                verticalTux -= 6;
                tux.setLocation(horizontalTux, verticalTux);
            }
        }
        if (evt.getKeyChar() == 's') {
            if (verticalTux <= 124) {
                verticalTux += 6;
                tux.setLocation(horizontalTux, verticalTux);
            }
        }
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mov().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel tux;
    private javax.swing.JLabel win;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        try {
            while (true) {
                posicionAleatoria();
                win.setLocation(randomX, randomY);
                colision();
                Thread.sleep(800);
            }
        } catch (Exception e) {
        }

    }

    public void validarColision() {
        if (validarCoordenadas(randomX, randomY)) {
            if (verticalTux != 0 && horizontalTux != 0) {
                hilo.suspend();
            }

            JOptionPane.showConfirmDialog(null, "colision");
        }
    }

    // 30, 45
    public boolean validarCoordenadas(int x, int y) {
        System.out.println("verticalWin : " + x + " horizontalWin : " + y);
        System.out.println("verticalTux : " + verticalTux + " horizontalTux : " + horizontalTux);
        int maxX = x + 15;
        int maxY = y + 15;
        int minX = x - 15;
        int minY = y - 15;
        System.out.println("maxXWin : " + maxX + " maxYWin : " + maxY);
        if (verticalTux != 0 && horizontalTux != 0) {
            if ((verticalTux >= minX && verticalTux <= maxX)
                    && (horizontalTux >= minY && horizontalTux <= maxY)) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public void colision() {
        areaTux = new ArrayList<>();
        areaWin = new ArrayList<>();
        int x = randomX;
        int y = randomY;
        int posicionMax = 40;
        for (int i = x; i < x + posicionMax; i++) {
            for (int j = y; j < y + posicionMax; j++) {
                areaWin.add(new CoordenadasDTO(i, j));
            }
        }

        x = horizontalTux;
        y = verticalTux;
        for (int i = x; i < x + posicionMax; i++) {
            for (int j = y; j < y + posicionMax; j++) {
                areaTux.add(new CoordenadasDTO(i, j));
            }
        }

        for (CoordenadasDTO coordenadaswin : areaWin) {
            for (CoordenadasDTO coordenadastux : areaTux) {
                if (coordenadaswin.getEjeX() == coordenadastux.getEjeX()
                        && coordenadaswin.getEjeY() == coordenadastux.getEjeY()) {
                    JOptionPane.showMessageDialog(null, "colision");
                    areaWin = new ArrayList<>();
                    areaTux = new ArrayList<>();
                }
            }
        }
    }
}
